// ? Завдання 1--------------------------------------------------------------------------------------------
// Дано масив чисел [1, 2, 3, 4, 5]. Створіть новий масив, що містить
// квадрати кожного елементу вхідного масиву.
// Очікуваний результат: [1, 4, 9, 16, 25].

// const numbers = [[1, 2, 3, 4, 5]]

// const newArray = numbers.map((el) => el ** 2);

// console.log(newArray);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 2---------------------------------------------------------------------------------------------
// Дано масив об'єктів. Створіть новий масив, що містить всі значення
// з масивів values кожного об'єкту, збережених в одному масиві.
// Очікуваний результат: [1, 2, 3, 4, 5, 6, 7, 8, 9].

// const data = [
//   { id: 1, values: [1, 2, 3] },
//   { id: 2, values: [4, 5, 6] },
//   { id: 3, values: [7, 8, 9] },
// ];

// const newArray = data.flatMap((value) => value.values);

// console.log(newArray);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 3---------------------------------------------------------------------------------------------
// Дано масив об'єктів.
// Перевірте, чи є хоча б один об'єкт з віком менше 20 років.
// Очікуваний результат: true.

// const people = [
//   { name: "John", age: 27 },
//   { name: "Jane", age: 31 },
//   { name: "Bob", age: 19 },
// ];

// const yang20 = people.some((value) => value.age < 20);

// console.log(yang20);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 4---------------------------------------------------------------------------------------------

// Дано масив чисел [2, 4, 6, 8, 10].
// Перевірте, чи є кожен елемент масиву парним. Очікуваний результат: true.

// const numbers = [2, 4, 6, 8, 10];

// const even = numbers.every((value) => value % 2 === 0);

// console.log(even);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 5---------------------------------------------------------------------------------------------

// Знайдіть перше непарне число

// const numbers = [2, 1, 6, 8, 9, 10, 12];

// const odd = numbers.find((value) => value % 2 !== 0);

// console.log(odd);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 6---------------------------------------------------------------------------------------------

// Відсортуйте масив чисел [4, 2, 5, 1, 3]
// у порядку зростання. Очікуваний результат: [1, 2, 3, 4, 5].

// const numbersArray = [4, 2, 5, 1, 3];

// const newArray = numbersArray.toSorted((a, b) => a - b);

// console.log(newArray);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 7---------------------------------------------------------------------------------------------

// Відсортуйте масив рядків ["banana", "orange", "apple", "pear"]
//  у порядку алфавіту.
// Очікуваний результат: ["apple", "banana", "orange", "pear"].

// const stringArray = ["banana", "orange", "apple", "pear"];

// const newArray = stringArray.toSorted((a, b) => a.localeCompare(b));

// console.log(newArray);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 8---------------------------------------------------------------------------------------------

//  Відсортуйте масив об'єктів за віком у порядку зростання.
// Очікуваний результат: [{name: "Bob", age: 19}, {name: "John", age: 27}, {name: "Jane", age: 31}].

// const users = [
//   { name: "John", age: 27 },
//   { name: "Jane", age: 31 },
//   { name: "Bob", age: 19 },
// ];

// const newArrUsers = users.toSorted((a, b) => a.age - b.age);

// console.log(newArrUsers);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 9---------------------------------------------------------------------------------------------

// Дано масив об'єктів.
// Створіть новий масив, що містить тільки об'єкти, в яких
// вік більше 20 років.
// Очікуваний результат: [{name: "John", age: 27}, {name: "Jane", age: 31}]

// const user = [
//   { name: "John", age: 27 },
//   { name: "Jane", age: 31 },
//   { name: "Bob", age: 19 },
// ];

// const newUser = user.filter((value) => value.age > 20);

// console.log(newUser);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 10---------------------------------------------------------------------------------------------

// Дано масив чисел [1, 2, 3, 4, 5].
// Застосуйте метод для обчислення суми елементів масиву.

// const numbers = [1, 2, 3, 4, 5];

// const sum = numbers.reduce((a, b) => a + b, 0);

// console.log(sum); //15

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 11---------------------------------------------------------------------------------------------

// Створи клас для калькулятора, який має такі методи:
// - метод number, який набуває початкового значення для наступних операцій
// - метод getResult, який повертає фінальний результат усіх операцій, проведених із числом
// - методи add, substruct, divide, multiply
// Об'єкт класу може проводити послідовні операції у вигляді ланцюжка

// class Calculator {
//   constructor(value) {
//     this.value = 0;
//   }
//   number(num) {
//     this.value = num;
//     return this;
//   }
//   getResult() {
//     return this.value;
//   }
//   add(num) {
//     this.value += num;
//     return this;
//   }
//   sub(num) {
//     this.value -= num;
//     return this;
//   }
//   div(num) {
//     this.value /= num;
//     return this;
//   }
//   mul(num) {
//     this.value *= num;
//     return this;
//   }
// }

// const calc = new Calculator();
// const result = calc.number(10).add(5).sub(3).mul(2).div(2).getResult();

// console.log(result);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 12---------------------------------------------------------------------------------------------

// Напиши клас Client який створює об'єкт з властивостями login email.
// Оголоси приватні властивості #login #email, доступ до яких зроби
// через геттер та сеттер login email

// class Client {
//   #login;
//   #email;
//   constructor(login, email) {
//     this.#login = login;
//     this.#email = email;
//   }
//   get login() {
//     return this.#login;
//   }

//   // Сеттер email
//   set login(newLogin) {
//     this.#login = newLogin;
//   }

//   get email() {
//     return this.#email;
//   }

//   set email(newEmail) {
//     this.#email = newEmail;
//   }
// }

// const client = new Client('userLogin', 'user@example.com');

// console.log(client.login);
// console.log(client.email);

// client.login = 'newUserLogin';
// client.email = 'newUser@example.com';

// console.log(client.login);
// console.log(client.email);

// *---------------------------------------------------------------------------------------------------------
// ? Завдання 13---------------------------------------------------------------------------------------------

//  Наслідування у класах!
// Cтворіть клас `Person`, який містить наступні властивості:
//  - `name` - ім'я людини;
//  - `age`- вік людини;
//  - `gender` - стать людини;
//  - `email`- електронна пошта людини.

// ##### Крім того, клас `Person` має мати метод `getDetails()`,
// який повертає об'єкт з ім'ям, віком, статтю
//та електронною поштою людини.

//
// Потім Створіть клас `Employee`, який розширює клас `Person` і містить наступні властивості:
//  - salary - зарплата співробітника;
//  - department - відділ, в якому працює співробітник.
//  ##### Крім того, клас `Employee` має мати метод `getEmployeeDetails()`, який повертає об'єкт з ідентифікатором співробітника, зарплатою та відділом, в якому працює співробітник.

// class Pereson {
//   constructor(name, age, gender, email) {
//     this.name = name;
//     this.age = age;
//     this.gender = gender;
//     this.email = email;
//   }
//   getDetails() {
//     return {
//       name: this.name,
//       age: this.age,
//       gender: this.gender,
//     };
//   }
// }

// class Employee extends Pereson {
//   constructor(name, age, gender, email, salary, department) {
//     super(name, age, gender, email);

//     this.salary = salary;
//     this.department = department;
//   }
//   getEmployeeDetails() {
//     return {
//       name: this.name, //ідентифікатор як імя
//       salary: this.age,
//       department: this.gender,
//     };
//   }
// }

// const person = new Pereson("Alice", 28, "female", "alice@example.com");
// console.log(person.getDetails());

// const employee = new Employee(
//   "Bob",
//   35,
//   "male",
//   "bob@example.com",
//   50000,
//   "IT"
// );
// console.log(employee.getDetails());
// console.log(employee.getEmployeeDetails());
// *---------------------------------------------------------------------------------------------------------
// ? Завдання 13---------------------------------------------------------------------------------------------
